import math


# 1) Сколько различных кратчайших путей по линиям сетки ведут из левого нижнего угла в правый верхний
# угол прямоугольной сетки размером 15 клеток по горизонтали и 15 клеток по вертикали?

# Пусть R - Шаг вправо
# Пусть U - Шаг вверх
# Тогда маршрут можно представить, как слово из букв N и E длинны 30 (Сетка 15x15):

# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
# Чтобы маршрут был кротчайший необходимо, чтобы количество шагов вправо совпадало с количеством шагов вверх,
# те. 15 шагов вправо и 15 шагов вверх

# Рассмотрим расстановку шагов вправо:
# _ R R _ R _ _ _ R _ R _ R _ R R _ _ R R _ R _ R _ R _ _ R R
# Нам не важен порядок расположения R, главное, чтобы их было 15

# Таким образом, задача сводится к тому, чтобы выбрать 15 позиций из 30 возможных

result_1 = math.comb(30, 15)


# 2) Сколько различных кратчайших путей по линиям сетки ведут из левого нижнего угла в правый верхний угол,
# если два вертикальных участка не могут идти подряд?

# Ограничение — никакие два шага вверх не могут идти подряд
# Оно означает, что в нашем слове никакие две буквы U не могут располагаться рядом

# Запишем подряд все возможные шаги вправо (15 штук)
# R R R R R R R R R R R R R R R
# Если записать их подряд, то между ними и по краям можно в промежутки вставить символ U:
# _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _ R _
# Чтобы буквы U никогда не шли подряд, в каждом промежутке можно вставить не более одной буквы U
# Поскольку нам нужно ровно 15 букв U, мы должны выбрать 15 из 16 промежутков, в которые поместим по одной букве U

# Таким образом, задача сводится к тому, чтобы выбрать 15 позиций из 16 возможных

result_2 = math.comb(16, 15)


print("Ответ 1:", result_1)
print("Ответ 2:", result_2)
